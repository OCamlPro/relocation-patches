diff -r -u -N ocaml-4.07.1-win32/bytecomp/dll.ml ../ocaml-4.07.1-reloc/bytecomp/dll.ml
--- ocaml-4.07.1-win32/bytecomp/dll.ml	2018-10-04 15:38:56.000000000 +0200
+++ ../ocaml-4.07.1-reloc/bytecomp/dll.ml	2020-07-16 10:52:39.071663773 +0200
@@ -121,7 +121,16 @@
     let ic = open_in (Filename.concat Config.standard_library "ld.conf") in
     begin try
       while true do
-        path := input_line ic :: !path
+        let line = input_line ic in
+        let len = String.length line in
+        let line =
+          if len > 0 && line.[0] = '+' then
+            Filename.concat
+              Config.standard_library
+              (String.sub line 1 (len - 1))
+          else
+            line in
+        path := line :: !path
       done
     with End_of_file -> ()
     end;
diff -r -u -N ocaml-4.07.1-win32/byterun/dynlink.c ../ocaml-4.07.1-reloc/byterun/dynlink.c
--- ocaml-4.07.1-win32/byterun/dynlink.c	2018-10-04 15:38:56.000000000 +0200
+++ ../ocaml-4.07.1-reloc/byterun/dynlink.c	2020-07-16 10:52:39.071663773 +0200
@@ -17,6 +17,7 @@

 /* Dynamic loading of C primitives. */

+#include <stdio.h>
 #include <stddef.h>
 #include <stdlib.h>
 #include <string.h>
@@ -36,6 +37,23 @@
 #include "caml/prims.h"
 #include "caml/signals.h"

+/* to keep the same patch... */
+#define T(x) _T(x)
+
+int debug_dynlink = 0;
+#define DLLPRINTF(...) if(debug_dynlink) fprintf (stderr, __VA_ARGS__)
+
+static void init_debug_dynlink(){
+  static int init_debug_dynlink = 1;
+
+  if( init_debug_dynlink ){
+    init_debug_dynlink = 0;
+    char_os *s = caml_secure_getenv(T("OCAML_DEBUG_DLL"));
+    if( s != NULL ) debug_dynlink = 1;
+    DLLPRINTF("dll debug started\n");
+  }
+}
+
 #ifndef NATIVE_CODE

 /* The table of primitives */
@@ -85,11 +103,21 @@
   struct stat st;
 #endif
   int ldconf, nread;
+  int must_free_stdlib = 0;

+  init_debug_dynlink();
   stdlib = caml_secure_getenv(_T("OCAMLLIB"));
   if (stdlib == NULL) stdlib = caml_secure_getenv(_T("CAMLLIB"));
+  if (stdlib == NULL) {
+    char_os *opam_prefix = caml_secure_getenv(T("OPAM_SWITCH_PREFIX"));
+    if( opam_prefix != NULL ){
+      stdlib = caml_stat_strconcat_os(3, opam_prefix, T("/"), T("lib/ocaml"));
+      must_free_stdlib = 1;
+    }
+  }
   if (stdlib == NULL) stdlib = OCAML_STDLIB_DIR;
   ldconfname = caml_stat_strconcat_os(3, stdlib, _T("/"), LD_CONF_NAME);
+  DLLPRINTF("ld.conf at %s\n", caml_stat_strdup_of_os(ldconfname));
   if (stat_os(ldconfname, &st) == -1) {
     caml_stat_free(ldconfname);
     return NULL;
@@ -111,12 +139,19 @@
   for (p = wconfig; *p != 0; p++) {
     if (*p == _T('\n')) {
       *p = 0;
+      if( *q == '+' ){
+        char_os* dest = caml_stat_strconcat_os(3, stdlib, T("/"), q+1);
+	DLLPRINTF("+dest: '%s'\n", caml_stat_strdup_of_os(dest));
+        caml_ext_table_add(&caml_shared_libs_path, dest);
+      } else {
       caml_ext_table_add(&caml_shared_libs_path, q);
+      }
       q = p + 1;
     }
   }
   if (q < p) caml_ext_table_add(&caml_shared_libs_path, q);
   close(ldconf);
+  if(must_free_stdlib) caml_stat_free(stdlib);
   caml_stat_free(ldconfname);
   return wconfig;
 }
@@ -129,6 +164,7 @@
   char * u8;
   void * handle;

+  init_debug_dynlink();
   realname = caml_search_dll_in_path(&caml_shared_libs_path, name);
   u8 = caml_stat_strdup_of_os(realname);
   caml_gc_message(0x100, "Loading shared library %s\n", u8);
diff -r -u -N ocaml-4.07.1-win32/byterun/Makefile ../ocaml-4.07.1-reloc/byterun/Makefile
--- ocaml-4.07.1-win32/byterun/Makefile	2018-10-04 15:38:56.000000000 +0200
+++ ../ocaml-4.07.1-reloc/byterun/Makefile	2020-07-16 10:52:39.071663773 +0200
@@ -109,8 +109,8 @@
 all: $(LIBRARIES) $(DYNLIBRARIES) $(PROGRAMS)

 ld.conf: ../config/Makefile
-	echo "$(STUBLIBDIR)" > $@
-	echo "$(LIBDIR)" >> $@
+	echo "+stublibs" > $@
+	echo "+" >> $@

 INSTALL_INCDIR=$(INSTALL_LIBDIR)/caml

diff -r -u -N ocaml-4.07.1-win32/byterun/unix.c ../ocaml-4.07.1-reloc/byterun/unix.c
--- ocaml-4.07.1-win32/byterun/unix.c	2018-10-04 15:38:56.000000000 +0200
+++ ../ocaml-4.07.1-reloc/byterun/unix.c	2020-07-16 10:52:39.071663773 +0200
@@ -71,6 +71,9 @@
 #define EWOULDBLOCK (-1)
 #endif

+
+extern int debug_dynlink;
+
 int caml_read_fd(int fd, int flags, void * buf, int n)
 {
   int retcode;
diff -r -u -N ocaml-4.07.1-win32/byterun/win32.c ../ocaml-4.07.1-reloc/byterun/win32.c
--- ocaml-4.07.1-win32/byterun/win32.c	2018-10-04 15:38:56.000000000 +0200
+++ ../ocaml-4.07.1-reloc/byterun/win32.c	2020-07-16 10:52:39.071663773 +0200
@@ -150,6 +150,10 @@
   return p;
 }

+
+extern int debug_dynlink;
+#define DLLPRINTF(...) if(debug_dynlink) fprintf (stderr, __VA_ARGS__)
+
 wchar_t * caml_search_in_path(struct ext_table * path, const wchar_t * name)
 {
   wchar_t * dir, * fullname;
@@ -158,22 +162,27 @@
   int i;
   struct _stati64 st;

+  DLLPRINTF("Searching for %s\n", caml_stat_strdup_of_utf16(name));
   for (p = name; *p != 0; p++) {
     if (*p == '/' || *p == '\\') goto not_found;
   }
   for (i = 0; i < path->size; i++) {
     dir = path->contents[i];
+    DLLPRINTF("  Trying %s\n", caml_stat_strdup_of_utf16(dir));
     if (dir[0] == 0) continue;
          /* not sure what empty path components mean under Windows */
     fullname = caml_stat_wcsconcat(3, dir, L"\\", name);
     u8 = caml_stat_strdup_of_utf16(fullname);
     caml_gc_message(0x100, "Searching %s\n", u8);
     caml_stat_free(u8);
-    if (_wstati64(fullname, &st) == 0 && S_ISREG(st.st_mode))
+    if (_wstati64(fullname, &st) == 0 && S_ISREG(st.st_mode)){
+      DLLPRINTF("  Found file %s\n", caml_stat_strdup_of_utf16(fullname));
       return fullname;
+    }
     caml_stat_free(fullname);
   }
  not_found:
+  DLLPRINTF("  Not found.\n");
   u8 = caml_stat_strdup_of_utf16(name);
   caml_gc_message(0x100, "%s not found in search path\n", u8);
   caml_stat_free(u8);
diff -r -u -N ocaml-4.07.1-win32/stdlib/Makefile ../ocaml-4.07.1-reloc/stdlib/Makefile
--- ocaml-4.07.1-win32/stdlib/Makefile	2018-10-04 15:38:56.000000000 +0200
+++ ../ocaml-4.07.1-reloc/stdlib/Makefile	2020-07-16 10:52:39.071663773 +0200
@@ -143,8 +143,8 @@
 ifeq "$(HASHBANGSCRIPTS)" "true"
 $(CAMLHEADERS): ../config/Makefile
 	for suff in '' d i; do \
-	  echo '#!$(BINDIR)/ocamlrun'$$suff > camlheader$$suff && \
-	  echo '#!$(TARGET_BINDIR)/ocamlrun'$$suff >target_camlheader$$suff; \
+	  echo '#!/usr/bin/env ocamlrun'$$suff > camlheader$$suff && \
+	  echo '#!/usr/bin/env ocamlrun'$$suff >target_camlheader$$suff; \
 	done && \
 	echo '#!' | tr -d '\012' > camlheader_ur;
 else # Hashbang scripts not supported
diff -r -u -N ocaml-4.07.1-win32/tools/Makefile ../ocaml-4.07.1-reloc/tools/Makefile
--- ocaml-4.07.1-win32/tools/Makefile	2018-10-04 15:38:56.000000000 +0200
+++ ../ocaml-4.07.1-reloc/tools/Makefile	2020-07-16 13:14:11.449360203 +0200
@@ -155,8 +155,7 @@


 ocamlmklibconfig.ml: ../config/Makefile Makefile
-	(echo 'let bindir = "$(BINDIR)"'; \
-         echo 'let supports_shared_libraries = $(SUPPORTS_SHARED_LIBRARIES)';\
+	(echo 'let supports_shared_libraries = $(SUPPORTS_SHARED_LIBRARIES)';\
          echo 'let default_rpath = "$(RPATH)"'; \
          echo 'let mksharedlibrpath = "$(MKSHAREDLIBRPATH)"'; \
          echo 'let toolpref = "$(TOOLPREF)"'; \
diff -r -u -N ocaml-4.07.1-win32/tools/Makefile~ ../ocaml-4.07.1-reloc/tools/Makefile~
--- ocaml-4.07.1-win32/tools/Makefile~	1970-01-01 01:00:00.000000000 +0100
+++ ../ocaml-4.07.1-reloc/tools/Makefile~	2020-07-16 10:52:10.571658289 +0200
@@ -0,0 +1,401 @@
+#**************************************************************************
+#*                                                                        *
+#*                                 OCaml                                  *
+#*                                                                        *
+#*            Xavier Leroy, projet Cristal, INRIA Rocquencourt            *
+#*                                                                        *
+#*   Copyright 1999 Institut National de Recherche en Informatique et     *
+#*     en Automatique.                                                    *
+#*                                                                        *
+#*   All rights reserved.  This file is distributed under the terms of    *
+#*   the GNU Lesser General Public License version 2.1, with the          *
+#*   special exception on linking described in the file LICENSE.          *
+#*                                                                        *
+#**************************************************************************
+
+MAKEFLAGS := -r -R
+include ../config/Makefile
+include ../Makefile.common
+
+ifeq ($(SYSTEM),unix)
+override define shellquote
+$i := $$(subst ",\",$$(subst $$$$,\$$$$,$$(subst `,\`,$i)))#")#
+endef
+$(foreach i,BINDIR LIBDIR STUBLIBDIR MANDIR,$(eval $(shellquote)))
+endif
+
+CAMLRUN ?= ../boot/ocamlrun
+CAMLYACC ?= ../boot/ocamlyacc
+DESTDIR ?=
+# Setup GNU make variables storing per-target source and target,
+# a list of installed tools, and a function to quote a filename for
+# the shell.
+override installed_tools := ocamldep ocamlprof ocamlcp ocamloptp \
+                   ocamlmktop ocamlmklib ocamlobjinfo
+
+install_files :=
+define byte2native
+$(patsubst %.cmo,%.cmx,$(patsubst %.cma,%.cmxa,$1))
+endef
+
+# $1 = target, $2 = OCaml object dependencies, $3 = other dependencies
+# There is a lot of subtle code here.  The multiple layers of expansion
+# are due to `make`'s eval() function, which evaluates the string
+# passed to it as a makefile fragment.  So it is crucial that variables
+# not get expanded too many times.
+define byte_and_opt_
+# This check is defensive programming
+$(and $(filter-out 1,$(words $1)),$(error \
+   cannot build file with whitespace in name))
+$1: $3 $2
+	$$(CAMLC) $$(LINKFLAGS) -I .. -o $$@ $2
+
+$1.opt: $3 $$(call byte2native,$2)
+	$$(CAMLOPT) $$(LINKFLAGS) -I .. -o $$@ $$(call byte2native,$2)
+
+all: $1
+
+opt.opt: $1.opt
+
+ifeq '$(filter $(installed_tools),$1)' '$1'
+install_files += $1
+endif
+clean::
+	rm -f -- $1 $1.opt
+
+endef
+
+# Escape any $ characters in the arguments and eval the result.
+define byte_and_opt
+$(eval $(call \
+ byte_and_opt_,$(subst $$,$$$$,$1),$(subst $$,$$$$,$2),$(subst $$,$$$$,$3)))
+endef
+
+ROOTDIR=..
+
+ifeq "$(wildcard $(ROOTDIR)/flexdll/Makefile)" ""
+export OCAML_FLEXLINK:=
+else
+export OCAML_FLEXLINK:=$(ROOTDIR)/boot/ocamlrun $(ROOTDIR)/flexdll/flexlink.exe
+endif
+
+CAMLC=$(CAMLRUN) ../boot/ocamlc -nostdlib -I ../boot \
+      -use-prims ../byterun/primitives -I ..
+CAMLOPT=$(CAMLRUN) ../ocamlopt -nostdlib -I ../stdlib
+ifeq "$(UNIX_OR_WIN32)" "win32"
+  ifneq "$(wildcard ../flexdll/Makefile)" ""
+    CAMLOPT := OCAML_FLEXLINK="../boot/ocamlrun ../flexdll/flexlink.exe" \
+      $(CAMLOPT)
+  endif
+endif
+CAMLLEX=$(CAMLRUN) ../boot/ocamllex
+INCLUDES=-I ../utils -I ../parsing -I ../typing -I ../bytecomp -I ../asmcomp \
+         -I ../middle_end -I ../middle_end/base_types -I ../driver \
+         -I ../toplevel
+COMPFLAGS= -absname -w +a-4-9-41-42-44-45-48 -strict-sequence -warn-error A \
+ -safe-string -strict-formats -bin-annot $(INCLUDES)
+LINKFLAGS=$(INCLUDES)
+VPATH := $(filter-out -I,$(INCLUDES))
+
+# scrapelabels addlabels
+
+.PHONY: all opt.opt
+
+# The dependency generator
+
+CAMLDEP_OBJ=ocamldep.cmo
+CAMLDEP_IMPORTS= \
+  ../compilerlibs/ocamlcommon.cma \
+  ../compilerlibs/ocamlbytecomp.cma
+ocamldep: LINKFLAGS += -compat-32
+$(call byte_and_opt,ocamldep,$(CAMLDEP_IMPORTS) $(CAMLDEP_OBJ),)
+ocamldep: depend.cmi
+ocamldep.opt: depend.cmi
+
+# ocamldep is precious: sometimes we are stuck in the middle of a
+# bootstrap and we need to remake the dependencies
+clean::
+	if test -f ocamldep; then mv -f ocamldep ocamldep.bak; else :; fi
+	rm -f ocamldep.opt
+
+
+# The profiler
+
+CSLPROF=ocamlprof.cmo
+CSLPROF_IMPORTS=misc.cmo config.cmo identifiable.cmo numbers.cmo \
+  arg_helper.cmo clflags.cmo terminfo.cmo \
+  build_path_prefix_map.cmo \
+  warnings.cmo location.cmo longident.cmo docstrings.cmo \
+  syntaxerr.cmo ast_helper.cmo parser.cmo lexer.cmo parse.cmo
+
+$(call byte_and_opt,ocamlprof,$(CSLPROF_IMPORTS) profiling.cmo $(CSLPROF),)
+
+ocamlcp_cmos = misc.cmo profile.cmo warnings.cmo config.cmo identifiable.cmo \
+               numbers.cmo arg_helper.cmo clflags.cmo main_args.cmo
+
+$(call byte_and_opt,ocamlcp,$(ocamlcp_cmos) ocamlcp.cmo,)
+$(call byte_and_opt,ocamloptp,$(ocamlcp_cmos) ocamloptp.cmo,)
+
+opt:: profiling.cmx
+
+install::
+	$(INSTALL_DATA) \
+	  profiling.cmi profiling.cmo profiling.cmt profiling.cmti \
+	  "$(INSTALL_LIBDIR)"
+
+installopt::
+	$(INSTALL_DATA) \
+          profiling.cmx profiling.$(O) \
+	  "$(INSTALL_LIBDIR)"
+
+# To help building mixed-mode libraries (OCaml + C)
+
+$(call byte_and_opt,ocamlmklib,ocamlmklibconfig.cmo config.cmo misc.cmo \
+	         ocamlmklib.cmo,)
+
+
+ocamlmklibconfig.ml: ../config/Makefile Makefile
+	(echo 'let bindir = "$(BINDIR)"'; \
+         echo 'let supports_shared_libraries = $(SUPPORTS_SHARED_LIBRARIES)';\
+         echo 'let default_rpath = "$(RPATH)"'; \
+         echo 'let mksharedlibrpath = "$(MKSHAREDLIBRPATH)"'; \
+         echo 'let toolpref = "$(TOOLPREF)"'; \
+         sed -n -e 's/^#ml //p' ../config/Makefile) \
+        > ocamlmklibconfig.ml
+
+beforedepend:: ocamlmklibconfig.ml
+
+clean::
+	rm -f ocamlmklibconfig.ml
+
+# To make custom toplevels
+
+OCAMLMKTOP=ocamlmktop.cmo
+OCAMLMKTOP_IMPORTS=misc.cmo identifiable.cmo numbers.cmo config.cmo \
+		   arg_helper.cmo clflags.cmo ccomp.cmo
+
+$(call byte_and_opt,ocamlmktop,$(OCAMLMKTOP_IMPORTS) $(OCAMLMKTOP),)
+
+# Converter olabl/ocaml 2.99 to ocaml 3
+
+OCAML299TO3= lexer299.cmo ocaml299to3.cmo
+LIBRARY3= misc.cmo warnings.cmo build_path_prefix_map.cmo location.cmo
+
+ocaml299to3: $(OCAML299TO3)
+	$(CAMLC) $(LINKFLAGS) -o ocaml299to3 $(LIBRARY3) $(OCAML299TO3)
+
+lexer299.ml: lexer299.mll
+	$(CAMLLEX) lexer299.mll
+
+#install::
+#	$(INSTALL_PROG) ocaml299to3 "$(INSTALL_BINDIR)/ocaml299to3$(EXE)"
+
+clean::
+	rm -f ocaml299to3 lexer299.ml
+
+# Label remover for interface files (upgrade 3.02 to 3.03)
+
+SCRAPELABELS= lexer301.cmo scrapelabels.cmo
+
+scrapelabels: $(SCRAPELABELS)
+	$(CAMLC) $(LINKFLAGS) -o scrapelabels $(LIBRARY3) $(SCRAPELABELS)
+
+lexer301.ml: lexer301.mll
+	$(CAMLLEX) lexer301.mll
+
+#install::
+#	$(INSTALL_PROG) scrapelabels "$(INSTALL_LIBDIR)"
+
+clean::
+	rm -f scrapelabels lexer301.ml
+
+# Insert labels following an interface file (upgrade 3.02 to 3.03)
+
+ADDLABELS_IMPORTS=misc.cmo config.cmo arg_helper.cmo clflags.cmo \
+  identifiable.cmo numbers.cmo terminfo.cmo \
+  build_path_prefix_map.cmo \
+  warnings.cmo location.cmo longident.cmo docstrings.cmo \
+  syntaxerr.cmo ast_helper.cmo parser.cmo lexer.cmo parse.cmo
+
+addlabels: addlabels.cmo
+	$(CAMLC) $(LINKFLAGS) -w sl -o addlabels \
+		$(ADDLABELS_IMPORTS) addlabels.cmo
+
+#install::
+#	$(INSTALL_PROG) addlabels "$(INSTALL_LIBDIR)"
+
+ifeq ($(UNIX_OR_WIN32),unix)
+LN := ln -sf
+else
+LN := cp -pf
+endif
+
+install::
+	for i in $(install_files); \
+	do \
+	  $(INSTALL_PROG) "$$i" "$(INSTALL_BINDIR)/$$i.byte$(EXE)" && \
+	  if test -f "$$i".opt; then \
+	    $(INSTALL_PROG) "$$i.opt" "$(INSTALL_BINDIR)/$$i.opt$(EXE)" && \
+	    (cd "$(INSTALL_BINDIR)/" && $(LN) "$$i.opt$(EXE)" "$$i$(EXE)"); \
+	  else \
+	    (cd "$(INSTALL_BINDIR)/" && $(LN) "$$i.byte$(EXE)" "$$i$(EXE)"); \
+	  fi; \
+	done
+
+clean::
+	rm -f addlabels
+
+# The preprocessor for asm generators
+
+CVT_EMIT=cvt_emit.cmo
+
+cvt_emit: $(CVT_EMIT)
+	$(CAMLC) $(LINKFLAGS) -o cvt_emit $(CVT_EMIT)
+
+# cvt_emit is precious: sometimes we are stuck in the middle of a
+# bootstrap and we need to remake the dependencies
+.PRECIOUS: cvt_emit
+clean::
+	if test -f cvt_emit; then mv -f cvt_emit cvt_emit.bak; else :; fi
+
+cvt_emit.ml: cvt_emit.mll
+	$(CAMLLEX) cvt_emit.mll
+
+clean::
+	rm -f cvt_emit.ml
+
+beforedepend:: cvt_emit.ml
+
+# Reading cmt files
+
+READ_CMT= \
+          ../compilerlibs/ocamlcommon.cma \
+          ../compilerlibs/ocamlbytecomp.cma \
+          \
+          cmt2annot.cmo read_cmt.cmo
+
+# Reading cmt files
+$(call byte_and_opt,read_cmt,$(READ_CMT),)
+
+install::
+	if test -f read_cmt.opt; then \
+	  $(INSTALL_PROG) read_cmt.opt "$(INSTALL_BINDIR)/ocamlcmt$(EXE)"; \
+	else \
+	  $(INSTALL_PROG) read_cmt "$(INSTALL_BINDIR)/ocamlcmt$(EXE)"; \
+	fi
+
+
+# The bytecode disassembler
+
+DUMPOBJ=opnames.cmo dumpobj.cmo
+
+$(call byte_and_opt,dumpobj,misc.cmo config.cmo identifiable.cmo \
+                    numbers.cmo arg_helper.cmo clflags.cmo tbl.cmo \
+                    ident.cmo opcodes.cmo bytesections.cmo $(DUMPOBJ),)
+
+make_opcodes.ml: make_opcodes.mll
+	$(CAMLLEX) make_opcodes.mll
+
+make_opcodes: make_opcodes.ml
+	$(CAMLC) make_opcodes.ml -o $@
+
+opnames.ml: ../byterun/caml/instruct.h make_opcodes
+	$(CAMLRUN) make_opcodes -opnames < $< > $@
+
+clean::
+	rm -f opnames.ml make_opcodes make_opcodes.ml
+
+beforedepend:: opnames.ml
+
+# Display info on compiled files
+
+ifeq "$(SYSTEM)" "macosx"
+DEF_SYMBOL_PREFIX = '-Dsymbol_prefix="_"'
+else
+DEF_SYMBOL_PREFIX = '-Dsymbol_prefix=""'
+endif
+
+objinfo_helper$(EXE): objinfo_helper.c ../byterun/caml/s.h
+	$(CC) $(CFLAGS) $(CPPFLAGS) -I../byterun $(OUTPUTEXE)$@ \
+          $(DEF_SYMBOL_PREFIX) $(LIBBFD_INCLUDE) $< $(LIBBFD_LINK)
+
+OBJINFO=../compilerlibs/ocamlcommon.cma \
+        ../compilerlibs/ocamlbytecomp.cma \
+        ../compilerlibs/ocamlmiddleend.cma \
+        ../asmcomp/printclambda.cmo \
+        ../asmcomp/export_info.cmo \
+        objinfo.cmo
+
+$(call byte_and_opt,ocamlobjinfo,$(OBJINFO),objinfo_helper$(EXE))
+
+install::
+	$(INSTALL_PROG) \
+	  objinfo_helper$(EXE) "$(INSTALL_LIBDIR)/objinfo_helper$(EXE)"
+
+# Scan object files for required primitives
+$(call byte_and_opt,primreq,config.cmo primreq.cmo,)
+
+LINTAPIDIFF=../compilerlibs/ocamlcommon.cmxa \
+        ../compilerlibs/ocamlbytecomp.cmxa \
+        ../compilerlibs/ocamlmiddleend.cmxa \
+        ../asmcomp/printclambda.cmx \
+        ../asmcomp/export_info.cmx \
+	../otherlibs/str/str.cmxa \
+	lintapidiff.cmx
+
+lintapidiff.opt: INCLUDES+= -I ../otherlibs/str
+lintapidiff.opt: $(LINTAPIDIFF)
+	$(CAMLOPT) $(LINKFLAGS) -I .. -o $@ $(LINTAPIDIFF)
+clean::
+	rm -f -- lintapidiff.opt lintapidiff.cm? lintapidiff.o
+
+
+clean::
+	rm -f "objinfo_helper$(EXE)" "objinfo_helper$(EXE).manifest"
+
+
+# Copy a bytecode executable, stripping debug info
+
+stripdebug=../compilerlibs/ocamlcommon.cma \
+           ../compilerlibs/ocamlbytecomp.cma \
+           stripdebug.cmo
+
+$(call byte_and_opt,stripdebug,$(stripdebug),)
+
+# Compare two bytecode executables
+
+CMPBYT=../compilerlibs/ocamlcommon.cma \
+       ../compilerlibs/ocamlbytecomp.cma \
+       cmpbyt.cmo
+
+$(call byte_and_opt,cmpbyt,$(CMPBYT),)
+
+ifeq "$(RUNTIMEI)" "true"
+install::
+	$(INSTALL_PROG) \
+	  ocaml-instr-graph ocaml-instr-report \
+	  "$(INSTALL_BINDIR)/"
+endif
+
+# Common stuff
+
+.SUFFIXES:
+
+%.cmo: %.ml
+	$(CAMLC) -c $(COMPFLAGS) - $<
+
+%.cmi: %.mli
+	$(CAMLC) -c $(COMPFLAGS) - $<
+
+%.cmx: %.ml
+	$(CAMLOPT) $(COMPFLAGS) -c - $<
+
+clean::
+	rm -f *.cmo *.cmi *.cma *.dll *.so *.lib *.a
+
+depend: beforedepend
+	$(CAMLRUN) ./ocamldep -slash $(INCLUDES) *.mli *.ml > .depend
+
+.PHONY: clean install beforedepend depend
+
+include .depend
diff -r -u -N ocaml-4.07.1-win32/tools/ocamlmklib.ml ../ocaml-4.07.1-reloc/tools/ocamlmklib.ml
--- ocaml-4.07.1-win32/tools/ocamlmklib.ml	2020-07-16 10:51:34.919658304 +0200
+++ ../ocaml-4.07.1-reloc/tools/ocamlmklib.ml	2020-07-16 13:14:20.229349392 +0200
@@ -18,8 +18,7 @@

 (* PR#4783: under Windows, don't use absolute paths because we do
    not know where the binary distribution will be installed. *)
-let compiler_path name =
-  if Sys.os_type = "Win32" then name else Filename.concat bindir name
+let compiler_path name = name

 let bytecode_objs = ref []  (* .cmo,.cma,.ml,.mli files to pass to ocamlc *)
 and native_objs = ref []    (* .cmx,.cmxa,.ml,.mli files to pass to ocamlopt *)
diff -r -u -N ocaml-4.07.1-win32/tools/ocamlmklib.ml~ ../ocaml-4.07.1-reloc/tools/ocamlmklib.ml~
--- ocaml-4.07.1-win32/tools/ocamlmklib.ml~	1970-01-01 01:00:00.000000000 +0100
+++ ../ocaml-4.07.1-reloc/tools/ocamlmklib.ml~	2020-07-16 10:52:10.571658289 +0200
@@ -0,0 +1,336 @@
+(**************************************************************************)
+(*                                                                        *)
+(*                                 OCaml                                  *)
+(*                                                                        *)
+(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
+(*                                                                        *)
+(*   Copyright 2001 Institut National de Recherche en Informatique et     *)
+(*     en Automatique.                                                    *)
+(*                                                                        *)
+(*   All rights reserved.  This file is distributed under the terms of    *)
+(*   the GNU Lesser General Public License version 2.1, with the          *)
+(*   special exception on linking described in the file LICENSE.          *)
+(*                                                                        *)
+(**************************************************************************)
+
+open Printf
+open Ocamlmklibconfig
+
+(* PR#4783: under Windows, don't use absolute paths because we do
+   not know where the binary distribution will be installed. *)
+let compiler_path name =
+  if Sys.os_type = "Win32" then name else Filename.concat bindir name
+
+let bytecode_objs = ref []  (* .cmo,.cma,.ml,.mli files to pass to ocamlc *)
+and native_objs = ref []    (* .cmx,.cmxa,.ml,.mli files to pass to ocamlopt *)
+and c_objs = ref []         (* .o, .a, .obj, .lib, .dll, .dylib, .so files to
+                               pass to mksharedlib and ar *)
+and caml_libs = ref []      (* -cclib to pass to ocamlc, ocamlopt *)
+and caml_opts = ref []      (* -ccopt to pass to ocamlc, ocamlopt *)
+and dynlink = ref supports_shared_libraries
+and failsafe = ref false    (* whether to fall back on static build only *)
+and c_libs = ref []         (* libs to pass to mksharedlib and ocamlc -cclib *)
+and c_Lopts = ref []      (* options to pass to mksharedlib and ocamlc -cclib *)
+and c_opts = ref []       (* options to pass to mksharedlib and ocamlc -ccopt *)
+and ld_opts = ref []        (* options to pass only to the linker *)
+and ocamlc = ref (compiler_path "ocamlc")
+and ocamlc_opts = ref []    (* options to pass only to ocamlc *)
+and ocamlopt = ref (compiler_path "ocamlopt")
+and ocamlopt_opts = ref []  (* options to pass only to ocamlc *)
+and output = ref "a"        (* Output name for OCaml part of library *)
+and output_c = ref ""       (* Output name for C part of library *)
+and rpath = ref []          (* rpath options *)
+and debug = ref false       (* -g option *)
+and verbose = ref false
+
+let starts_with s pref =
+  String.length s >= String.length pref &&
+  String.sub s 0 (String.length pref) = pref
+let ends_with = Filename.check_suffix
+let chop_prefix s pref =
+  String.sub s (String.length pref) (String.length s - String.length pref)
+let chop_suffix = Filename.chop_suffix
+
+exception Bad_argument of string
+
+let print_version () =
+  Misc.mingw_binary_output ();
+  printf "ocamlmklib, version %s\n" Sys.ocaml_version;
+  exit 0;
+;;
+
+let print_version_num () =
+  Misc.mingw_binary_output ();
+  printf "%s\n" Sys.ocaml_version;
+  exit 0;
+;;
+
+let parse_arguments argv =
+  let i = ref 1 in
+  let next_arg () =
+    if !i + 1 >= Array.length argv
+    then raise (Bad_argument("Option " ^ argv.(!i) ^ " expects one argument"));
+    incr i; argv.(!i) in
+  while !i < Array.length argv do
+    let s = argv.(!i) in
+    if ends_with s ".cmo" || ends_with s ".cma" then
+      bytecode_objs := s :: !bytecode_objs
+    else if ends_with s ".cmx" || ends_with s ".cmxa" then
+      native_objs := s :: !native_objs
+    else if ends_with s ".ml" || ends_with s ".mli" then
+     (bytecode_objs := s :: !bytecode_objs;
+      native_objs := s :: !native_objs)
+    else if List.exists (ends_with s)
+                        [".o"; ".a"; ".obj"; ".lib"; ".dll"; ".dylib"; ".so"]
+    then
+      c_objs := s :: !c_objs
+    else if s = "-cclib" then
+      caml_libs := next_arg () :: "-cclib" :: !caml_libs
+    else if s = "-ccopt" then
+      caml_opts := next_arg () :: "-ccopt" :: !caml_opts
+    else if s = "-custom" then
+      dynlink := false
+    else if s = "-I" then
+      caml_opts := next_arg () :: "-I" :: !caml_opts
+    else if s = "-failsafe" then
+      failsafe := true
+    else if s = "-g" then
+      debug := true
+    else if s = "-h" || s = "-help" || s = "--help" then
+      raise (Bad_argument "")
+    else if s = "-ldopt" then
+      ld_opts := next_arg () :: !ld_opts
+    else if s = "-linkall" then
+      caml_opts := s :: !caml_opts
+    else if starts_with s "-l" then
+      let s =
+        if Config.ccomp_type = "msvc" then
+          String.sub s 2 (String.length s - 2) ^ ".lib"
+        else
+          s
+      in
+      c_libs := s :: !c_libs
+    else if starts_with s "-L" then
+     (c_Lopts := s :: !c_Lopts;
+      let l = chop_prefix s "-L" in
+      if not (Filename.is_relative l) then rpath := l :: !rpath)
+    else if s = "-ocamlcflags" then
+      ocamlc_opts := next_arg () :: !ocamlc_opts
+    else if s = "-ocamlc" then
+      ocamlc := next_arg ()
+    else if s = "-ocamlopt" then
+      ocamlopt := next_arg ()
+    else if s = "-ocamloptflags" then
+      ocamlopt_opts := next_arg () :: !ocamlopt_opts
+    else if s = "-o" then
+      output := next_arg()
+    else if s = "-oc" then
+      output_c := next_arg()
+    else if s = "-dllpath" || s = "-R" || s = "-rpath" then
+      rpath := next_arg() :: !rpath
+    else if starts_with s "-R" then
+      rpath := chop_prefix s "-R" :: !rpath
+    else if s = "-Wl,-rpath" then
+     (let a = next_arg() in
+      if starts_with a "-Wl,"
+      then rpath := chop_prefix a "-Wl," :: !rpath
+      else raise (Bad_argument("Option -Wl,-rpath expects a -Wl, argument")))
+    else if starts_with s "-Wl,-rpath," then
+      rpath := chop_prefix s "-Wl,-rpath," :: !rpath
+    else if starts_with s "-Wl,-R" then
+      rpath := chop_prefix s "-Wl,-R" :: !rpath
+    else if s = "-v" || s = "-verbose" then
+      verbose := true
+    else if s = "-version" then
+      print_version ()
+    else if s = "-vnum" then
+      print_version_num ()
+    else if starts_with s "-F" then
+      c_opts := s :: !c_opts
+    else if s = "-framework" then
+      (let a = next_arg() in c_opts := a :: s :: !c_opts)
+    else if starts_with s "-" then
+      prerr_endline ("Unknown option " ^ s)
+    else
+      raise (Bad_argument("Don't know what to do with " ^ s));
+    incr i
+  done;
+  List.iter
+    (fun r -> r := List.rev !r)
+    [ bytecode_objs; native_objs; caml_libs; caml_opts;
+      c_libs; c_objs; c_opts; ld_opts; rpath ];
+(* Put -L options in front of -l options in -cclib to mimic -ccopt behavior *)
+  c_libs := !c_Lopts @ !c_libs;
+
+  if !output_c = "" then output_c := !output
+
+let usage = "\
+Usage: ocamlmklib [options] <.cmo|.cma|.cmx|.cmxa|.ml|.mli|.o|.a|.obj|.lib|\
+                             .dll|.dylib files>\
+\nOptions are:\
+\n  -cclib <lib>   C library passed to ocamlc -a or ocamlopt -a only\
+\n  -ccopt <opt>   C option passed to ocamlc -a or ocamlopt -a only\
+\n  -custom        Disable dynamic loading\
+\n  -g             Build with debug information\
+\n  -dllpath <dir> Add <dir> to the run-time search path for DLLs\
+\n  -F<dir>        Specify a framework directory (MacOSX)\
+\n  -framework <name>    Use framework <name> (MacOSX)\
+\n  -help          Print this help message and exit\
+\n  --help         Same as -help\
+\n  -h             Same as -help\
+\n  -I <dir>       Add <dir> to the path searched for OCaml object files\
+\n  -failsafe      fall back to static linking if DLL construction failed\
+\n  -ldopt <opt>   C option passed to the shared linker only\
+\n  -linkall       Build OCaml archive with link-all behavior\
+\n  -l<lib>        Specify a dependent C library\
+\n  -L<dir>        Add <dir> to the path searched for C libraries\
+\n  -ocamlc <cmd>  Use <cmd> in place of \"ocamlc\"\
+\n  -ocamlcflags <opt>    Pass <opt> to ocamlc\
+\n  -ocamlopt <cmd> Use <cmd> in place of \"ocamlopt\"\
+\n  -ocamloptflags <opt>  Pass <opt> to ocamlopt\
+\n  -o <name>      Generated OCaml library is named <name>.cma or <name>.cmxa\
+\n  -oc <name>     Generated C library is named dll<name>.so or lib<name>.a\
+\n  -rpath <dir>   Same as -dllpath <dir>\
+\n  -R<dir>        Same as -rpath\
+\n  -verbose       Print commands before executing them\
+\n  -v             same as -verbose\
+\n  -version       Print version and exit\
+\n  -vnum          Print version number and exit\
+\n  -Wl,-rpath,<dir>     Same as -dllpath <dir>\
+\n  -Wl,-rpath -Wl,<dir> Same as -dllpath <dir>\
+\n  -Wl,-R<dir>          Same as -dllpath <dir>\
+\n"
+
+let command cmd =
+  if !verbose then (print_string "+ "; print_string cmd; print_newline());
+  Sys.command cmd
+
+let scommand cmd =
+  if command cmd <> 0 then exit 2
+
+let safe_remove s =
+  try Sys.remove s with Sys_error _ -> ()
+
+let make_set l =
+  let rec merge l = function
+    []     -> List.rev l
+  | p :: r -> if List.mem p l then merge l r else merge (p::l) r
+  in
+  merge [] l
+
+let make_rpath flag =
+  if !rpath = [] || flag = ""
+  then ""
+  else flag ^ String.concat ":" (make_set !rpath)
+
+let make_rpath_ccopt flag =
+  if !rpath = [] || flag = ""
+  then ""
+  else "-ccopt " ^ flag ^ String.concat ":" (make_set !rpath)
+
+let prefix_list pref l =
+  List.map (fun s -> pref ^ s) l
+
+let prepostfix pre name post =
+  let base = Filename.basename name in
+  let dir = Filename.dirname name in
+  Filename.concat dir (pre ^ base ^ post)
+;;
+
+let transl_path s =
+  match Sys.os_type with
+    | "Win32" ->
+        let s = Bytes.of_string s in
+        let rec aux i =
+          if i = Bytes.length s || Bytes.get s i = ' ' then s
+          else begin
+            if Bytes.get s i = '/' then Bytes.set s i '\\';
+            aux (i + 1)
+          end
+        in Bytes.to_string (aux 0)
+    | _ -> s
+
+let flexdll_dirs =
+  let dirs =
+    let expand = Misc.expand_directory Config.standard_library in
+    List.map expand Config.flexdll_dirs
+  in
+  let f dir =
+    let dir =
+      if String.contains dir ' ' then
+        "\"" ^ dir ^ "\""
+      else
+        dir
+    in
+      "-L" ^ dir
+  in
+  List.map f dirs
+
+let build_libs () =
+  if !c_objs <> [] then begin
+    if !dynlink then begin
+      let retcode = command
+          (Printf.sprintf "%s %s -o %s %s %s %s %s %s %s"
+             Config.mkdll
+             (if !debug then "-g" else "")
+             (prepostfix "dll" !output_c Config.ext_dll)
+             (String.concat " " !c_objs)
+             (String.concat " " !c_opts)
+             (String.concat " " !ld_opts)
+             (make_rpath mksharedlibrpath)
+             (String.concat " " !c_libs)
+             (String.concat " " flexdll_dirs)
+          )
+      in
+      if retcode <> 0 then if !failsafe then dynlink := false else exit 2
+    end;
+    safe_remove (prepostfix "lib" !output_c Config.ext_lib);
+    scommand
+      (mklib (prepostfix "lib" !output_c Config.ext_lib)
+             (String.concat " " !c_objs) "");
+  end;
+  if !bytecode_objs <> [] then
+    scommand
+      (sprintf "%s -a %s %s %s -o %s.cma %s %s -dllib -l%s -cclib -l%s \
+                   %s %s %s %s"
+                  (transl_path !ocamlc)
+                  (if !debug then "-g" else "")
+                  (if !dynlink then "" else "-custom")
+                  (String.concat " " !ocamlc_opts)
+                  !output
+                  (String.concat " " !caml_opts)
+                  (String.concat " " !bytecode_objs)
+                  (Filename.basename !output_c)
+                  (Filename.basename !output_c)
+                  (String.concat " " (prefix_list "-ccopt " !c_opts))
+                  (make_rpath_ccopt default_rpath)
+                  (String.concat " " (prefix_list "-cclib " !c_libs))
+                  (String.concat " " !caml_libs));
+  if !native_objs <> [] then
+    scommand
+      (sprintf "%s -a %s %s -o %s.cmxa %s %s -cclib -l%s %s %s %s %s"
+                  (transl_path !ocamlopt)
+                  (if !debug then "-g" else "")
+                  (String.concat " " !ocamlopt_opts)
+                  !output
+                  (String.concat " " !caml_opts)
+                  (String.concat " " !native_objs)
+                  (Filename.basename !output_c)
+                  (String.concat " " (prefix_list "-ccopt " !c_opts))
+                  (make_rpath_ccopt default_rpath)
+                  (String.concat " " (prefix_list "-cclib " !c_libs))
+                  (String.concat " " !caml_libs))
+
+let _ =
+  try
+    parse_arguments Sys.argv;
+    build_libs()
+  with
+  | Bad_argument "" ->
+      prerr_string usage; exit 0
+  | Bad_argument s ->
+      prerr_endline s; prerr_string usage; exit 4
+  | Sys_error s ->
+      prerr_string "System error: "; prerr_endline s; exit 4
+  | x ->
+      raise x
diff -r -u -N ocaml-4.07.1-win32/toplevel/topdirs.ml ../ocaml-4.07.1-reloc/toplevel/topdirs.ml
--- ocaml-4.07.1-win32/toplevel/topdirs.ml	2018-10-04 15:38:56.000000000 +0200
+++ ../ocaml-4.07.1-reloc/toplevel/topdirs.ml	2020-07-16 10:52:39.071663773 +0200
@@ -152,6 +152,7 @@
   end

 let rec load_file recursive ppf name =
+  let name = expand_directory Config.standard_library name in
   let filename =
     try Some (find_in_path !Config.load_path name) with Not_found -> None
   in
diff -r -u -N ocaml-4.07.1-win32/utils/config.mlp ../ocaml-4.07.1-reloc/utils/config.mlp
--- ocaml-4.07.1-win32/utils/config.mlp	2020-07-16 10:51:34.919658304 +0200
+++ ../ocaml-4.07.1-reloc/utils/config.mlp	2020-07-16 10:52:39.071663773 +0200
@@ -148,6 +148,139 @@
 let host = "%%HOST%%"
 let target = "%%TARGET%%"

+module Relocate = struct
+  (* OCamlPro SAS *)
+
+  (*
+    Find the ocaml library directory relatively to the path of the command.
+    We use two strategies:
+    * If OPAM_SWITCH_PREFIX is defined, we use it, with "lib/ocaml" appended.
+    It should work for packages like ppx_tools that link the compilerlibs
+    and call their tool in its build directory, i.e. with a wrong relative
+    path to the standard library.
+    * Otherwise, it's "../../lib/ocaml" appended to the name of the
+    command. We simplify and normalize the filename, hopefully in a
+    Windows-compatible way.
+  *)
+
+let find_in_path path name =
+  if not (Filename.is_implicit name) then
+    if Sys.file_exists name then name else raise Not_found
+  else begin
+    let rec try_dir = function
+    [] -> raise Not_found
+      | dir::rem ->
+        let fullname = Filename.concat dir name in
+        if Sys.file_exists fullname then fullname else try_dir rem
+    in try_dir path
+  end
+
+  (* split a string [s] at every char [c], and return the list of sub-strings *)
+let split s c =
+  let len = String.length s in
+  let rec iter pos to_rev =
+    if pos = len then List.rev ("" :: to_rev) else
+      match try
+              Some ( String.index_from s pos c )
+        with Not_found -> None
+      with
+          Some pos2 ->
+            if pos2 = pos then iter (pos+1) ("" :: to_rev) else
+              iter (pos2+1) ((String.sub s pos (pos2-pos)) :: to_rev)
+        | None -> List.rev ( String.sub s pos (len-pos) :: to_rev )
+  in
+  iter 0 []
+
+let simplify path =
+  let rec simplify path rev =
+    match path with
+      | [] -> List.rev rev
+      | ".." :: path ->
+        begin
+          match rev with
+            | [] -> simplify path rev
+            | _ :: rev -> simplify path rev
+        end
+      | "." :: path -> simplify path rev
+      | "" :: path -> simplify path rev
+      | dir :: path -> simplify path ( dir :: rev )
+  in
+  simplify path []
+
+let slashify =
+  if Sys.win32 then
+    fun s -> String.map ( fun x -> if x = '\\' then '/' else x ) s
+  else
+    fun id -> id
+
+let normalize_filename filename =
+
+    (* make relative path absolute *)
+  let filename =
+    if Filename.is_relative filename then
+      Filename.concat (Sys.getcwd ()) filename
+    else
+      filename
+  in
+
+  let filename = slashify filename in
+  let len = String.length filename in
+
+  let path = split filename '/' in
+
+  let has_leading_slash = len > 0 && filename.[0] = '/' in
+  if has_leading_slash then
+    String.concat "/" ("" :: simplify path)
+  else
+    match path with
+      | [] -> assert false
+      | partition :: path ->
+        String.concat "/" (partition :: simplify path)
+
+  (* When called from the Windows shell, Sys.executable_name is not
+     correct, we have to search it again in the PATH to make it
+     absolute. *)
+let path_sep = if Sys.win32 then ';' else ':'
+let env_path =
+  try
+    split (Sys.getenv "PATH") path_sep
+  with Not_found -> []
+
+let standard_library_default =
+  match Sys.getenv "OPAM_SWITCH_PREFIX" with
+    | dirname ->
+      Filename.concat dirname "lib/ocaml"
+    | exception Not_found ->
+        let executable_name =
+          let executable_name = Sys.executable_name in
+          if Filename.is_implicit executable_name then
+            let executable_name =
+              if Sys.win32 &&
+                 not ( Filename.check_suffix executable_name ".exe" ) then
+                executable_name ^ ".exe" else
+                executable_name in
+            try
+              find_in_path env_path executable_name
+            with Not_found ->
+              executable_name
+          else
+            executable_name
+        in
+        normalize_filename
+          ( executable_name ^ "/../../lib/ocaml" )
+
+end
+
+let standard_library =
+  ignore ( standard_library ); (* avoid warning *)
+  try
+    Relocate.slashify ( Sys.getenv "OCAMLLIB" )
+  with Not_found ->
+  try
+    Relocate.slashify ( Sys.getenv "CAMLLIB" )
+  with Not_found ->
+    Relocate.standard_library_default
+
 let default_executable_name =
   match Sys.os_type with
     "Unix" -> "a.out"
